#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');


Firebase = require('firebase');
fb = new Firebase(process.env.firebase_ref);

console.log("Connecting to firebase: "+process.env.firebase_ref);

fb.authWithCustomToken(process.env.firebase_secret, function(error, authData) {
  if (error) {
    console.log("Login Failed!", error);
  } else {
    console.log("Login Succeeded!", authData);
    //get the port from the base set at fb
    /*
fb.child('seneca').child('base').on('value', function(baseSnap) {
  // code to handle new value.
var base = baseSnap.val();
  seneca .use('mesh',
  {
      auto:true,
    listen: [
      { pin: ' role: cloudinary', 
      //host: 'ir-seneca-batch.herokuapp.com'
    }
      ] ,
      // required to be detect the base
    bases: ['127.0.0.1:39999','irehearse-habashy.herokuapp.com:39999'],
  //  host: 'ir-seneca-batch.herokuapp.com'
  })
});
*/
   
  }
});

cloudinary = require("cloudinary");

cloudinary.config({

  cloud_name: process.env.cloudinary_name,
  api_key: process.env.cloudinary_api_key,
  api_secret: process.env.cloudinary_secret

});

_ = require('underscore');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


module.exports.closeServer = function(){
  server.close();
  console.log("server closed");
};